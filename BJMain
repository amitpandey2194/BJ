<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simplified Blackjack Helper - Audio Output Demo</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            overscroll-behavior-y: none;
            background-color: #065f46; 
            color: #d1fae5; 
        }
        .card {
            width: 70px; height: 100px; border: 1px solid #4a5568;
            border-radius: 0.375rem; display: flex; flex-direction: column;
            justify-content: space-between; align-items: center; padding: 0.5rem;
            background-color: white; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            font-weight: bold; font-size: 1.125rem; 
        }
        .card.red { color: #dc2626; } .card.black { color: #1f2937; }
        .card-value-top { align-self: flex-start; }
        .card-suit { font-size: 1.75rem; }
        .card-value-bottom { align-self: flex-end; transform: rotate(180deg); }
        .hidden-card {
            background-color: #4b5563;
            background-image: repeating-linear-gradient(45deg, #374151, #374151 10px, #4b5563 10px, #4b5563 20px);
            border: 1px dashed #9ca3af;
        }
        .game-button {
            transition: all 0.15s ease-in-out; border-radius: 0.5rem; 
            padding: 0.6rem 1rem; font-weight: bold; text-transform: uppercase;
            letter-spacing: 0.05em; box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            font-size: 0.9rem; /* Slightly smaller buttons */
        }
        .game-button:disabled { opacity: 0.5; cursor: not-allowed; box-shadow: none; }
        .game-button:hover:not(:disabled) { transform: translateY(-2px); box-shadow: 0 4px 10px rgba(0,0,0,0.3); }

        .modal {
            display: none; position: fixed; z-index: 100; left: 0; top: 0; 
            width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.7);
            backdrop-filter: blur(3px);
        }
        .modal-content {
            background-color: #f0fdf4; color: #1f2937; margin: 8% auto; padding: 25px;
            border: 1px solid #059669; width: 90%; max-width: 550px;
            border-radius: 0.75rem; position: relative; box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }
        .modal-close-button {
            color: #4b5563; float: right; font-size: 30px; font-weight: bold;
            position: absolute; top: 10px; right: 20px; transition: color 0.2s ease;
        }
        .modal-close-button:hover, .modal-close-button:focus { color: #ef4444; text-decoration: none; cursor: pointer; }
        .gemini-explanation-content p { margin-bottom: 0.75rem; line-height: 1.6; }
        .gemini-explanation-content strong { color: #047857; }
        .loader {
            border: 5px solid #d1d5db; border-top: 5px solid #059669;
            border-radius: 50%; width: 40px; height: 40px;
            animation: spin 1s linear infinite; margin: 20px auto;
        }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .gemini-explanation-content { max-height: 60vh; overflow-y: auto; padding-right: 10px; }
        .gemini-explanation-content::-webkit-scrollbar { width: 8px; }
        .gemini-explanation-content::-webkit-scrollbar-track { background: #e5e7eb; border-radius: 4px;}
        .gemini-explanation-content::-webkit-scrollbar-thumb { background: #059669; border-radius: 4px;}
        .gemini-explanation-content::-webkit-scrollbar-thumb:hover { background: #047857; }

        .chip {
            display: inline-flex; align-items: center; justify-content: center;
            width: 45px; height: 45px; border-radius: 50%;
            font-weight: bold; color: white; margin: 4px; cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3), inset 0 -2px 2px rgba(0,0,0,0.2);
            transition: all 0.15s ease-in-out; border: 2px solid rgba(255,255,255,0.5);
            font-size: 0.875rem;
        }
        .chip:hover { transform: scale(1.1) translateY(-1px); box-shadow: 0 4px 8px rgba(0,0,0,0.4), inset 0 -2px 2px rgba(0,0,0,0.2); }
        .chip-1 { background-color: #ef4444; } .chip-5 { background-color: #3b82f6; }
        .chip-10 { background-color: #10b981; } .chip-25 { background-color: #8b5cf6; }
        .chip-100 { background-color: #f59e0b; }

        .bg-green-custom { background-color: #10b981; } 
        .hover\:bg-green-custom-hover:hover { background-color: #059669; }
        .bg-blue-custom { background-color: #3b82f6; }
        .hover\:bg-blue-custom-hover:hover { background-color: #2563eb; }
        .bg-red-custom { background-color: #ef4444; }
        .hover\:bg-red-custom-hover:hover { background-color: #dc2626; }
        .bg-yellow-custom { background-color: #f59e0b; color: #1f2937; }
        .hover\:bg-yellow-custom-hover:hover { background-color: #d97706; }
        .bg-orange-custom { background-color: #f97316; }
        .hover\:bg-orange-custom-hover:hover { background-color: #ea580c; }
        .bg-sky-custom { background-color: #0ea5e9; }
        .hover\:bg-sky-custom-hover:hover { background-color: #0284c7; }
    </style>
</head>
<body class="flex flex-col min-h-screen items-center justify-center p-2 sm:p-4">

    <header class="mb-4 text-center">
        <h1 class="text-3xl sm:text-4xl font-bold text-emerald-300 drop-shadow-lg">Blackjack Buddy</h1>
        <p class="text-emerald-400 text-sm">Simplified Audio Output Demo</p>
    </header>

    <main class="bg-emerald-700 p-3 sm:p-6 rounded-xl shadow-2xl w-full max-w-lg"> {/* Max width slightly reduced */}
        <div id="dealer-area" class="mb-4">
            <div class="flex justify-between items-center mb-2">
                <h2 class="text-lg font-semibold text-emerald-200">Dealer</h2>
                <span id="dealer-score" class="text-lg font-bold text-emerald-100 bg-emerald-600 px-2 py-0.5 rounded-md shadow-sm">0</span>
            </div>
            <div id="dealer-cards" class="flex space-x-2 h-[110px] items-center bg-emerald-800 p-2 rounded-lg shadow-inner min-h-[110px]"></div>
        </div>

        <div id="player-area" class="mb-4">
             <div class="flex justify-between items-center mb-2">
                <h2 class="text-lg font-semibold text-emerald-200">You</h2>
                <span id="player-score" class="text-lg font-bold text-emerald-100 bg-emerald-600 px-2 py-0.5 rounded-md shadow-sm">0</span>
            </div>
            <div id="player-cards" class="flex space-x-2 h-[110px] items-center bg-emerald-800 p-2 rounded-lg shadow-inner min-h-[110px]"></div>
        </div>

        <div id="message-area" class="mb-4 p-3 bg-emerald-600 rounded-lg shadow text-center min-h-[70px] flex flex-col justify-center items-center">
            <p id="game-message" class="text-base font-medium text-yellow-300"></p>
            <p id="advice-message" class="text-xs text-emerald-100 mt-1"></p>
            <button id="explain-advice-button" class="hidden mt-1 bg-sky-custom hover:bg-sky-custom-hover text-white text-xs font-semibold py-1 px-2 rounded-md shadow-sm" data-strategy="">
                âœ¨ Explain
            </button>
        </div>
        
        <div id="betting-area" class="mb-4 text-center p-3 bg-emerald-800 rounded-lg shadow-inner">
            <div class="flex justify-around items-center mb-2">
                <h3 class="text-sm font-semibold text-emerald-200">Bet: <span class="text-yellow-300 text-base font-bold">$<span id="current-bet">0</span></span></h3>
                <h3 class="text-sm font-semibold text-emerald-200">Chips: <span class="text-green-300 text-base font-bold">$<span id="player-chips">100</span></span></h3>
            </div>
            <div id="chips-container" class="flex justify-center items-center flex-wrap space-x-1 sm:space-x-2 mb-2"></div>
             <button id="clear-bet-button" class="game-button bg-yellow-custom hover:bg-yellow-custom-hover text-xs px-3 py-1.5">Clear Bet</button>
        </div>

        <div id="action-buttons" class="grid grid-cols-3 gap-2">
            <button id="deal-button" class="game-button bg-green-custom hover:bg-green-custom-hover text-white">Deal</button>
            <button id="hit-button" class="game-button bg-blue-custom hover:bg-blue-custom-hover text-white" disabled>Hit</button>
            <button id="stand-button" class="game-button bg-red-custom hover:bg-red-custom-hover text-white" disabled>Stand</button>
            <button id="mute-button" class="game-button bg-orange-custom hover:bg-orange-custom-hover text-white col-span-3 mt-2">ðŸ”‡ Mute Buddy</button>
        </div>
    </main>

    <div id="geminiModal" class="modal">
        <div class="modal-content">
            <span id="modalCloseButton" class="modal-close-button">&times;</span>
            <h3 id="geminiModalTitle" class="text-xl font-semibold mb-4 text-emerald-700">Strategy Explanation</h3>
            <div id="geminiModalContent" class="gemini-explanation-content text-sm">
                <div class="loader"></div>
                <p class="text-center text-gray-600">Please wait, loading information...</p>
            </div>
        </div>
    </div>

    <footer class="mt-6 text-center text-emerald-400 text-xs">
        <p>&copy; <span id="currentYear"></span> Blackjack Buddy. For entertainment only.</p>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const dealerScoreEl = document.getElementById('dealer-score');
            const dealerCardsEl = document.getElementById('dealer-cards');
            const playerScoreEl = document.getElementById('player-score');
            const playerCardsEl = document.getElementById('player-cards');
            const gameMessageEl = document.getElementById('game-message');
            const adviceMessageEl = document.getElementById('advice-message');
            const explainAdviceButton = document.getElementById('explain-advice-button');
            const dealButton = document.getElementById('deal-button');
            const hitButton = document.getElementById('hit-button');
            const standButton = document.getElementById('stand-button');
            const currentBetEl = document.getElementById('current-bet');
            const playerChipsEl = document.getElementById('player-chips');
            const chipsContainer = document.getElementById('chips-container');
            const clearBetButton = document.getElementById('clear-bet-button');
            const muteButton = document.getElementById('mute-button');
            document.getElementById('currentYear').textContent = new Date().getFullYear();
            const geminiModal = document.getElementById('geminiModal');
            const geminiModalTitle = document.getElementById('geminiModalTitle');
            const geminiModalContent = document.getElementById('geminiModalContent');
            const modalCloseButton = document.getElementById('modalCloseButton');

            let deck = [], playerHand = [], dealerHand = [];
            let playerScore = 0, dealerScore = 0, playerChips = 100, currentBet = 0;
            let gameInProgress = false, dealerHiddenCard = null;
            const suits = ['â™ ', 'â™¥', 'â™£', 'â™¦'];
            const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
            const chipValues = [1, 5, 10, 25, 100];

            let isMuted = false;
            const speechSynthesis = window.speechSynthesis;
            let speechQueue = [];
            let isSpeaking = false;

            function speak(text, priority = false) {
                if (isMuted || !speechSynthesis || !text) return;
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'en-US';
                utterance.onend = () => { isSpeaking = false; processSpeechQueue(); };
                utterance.onerror = () => { isSpeaking = false; processSpeechQueue(); };

                if (priority) {
                    speechSynthesis.cancel();
                    speechQueue = []; 
                    isSpeaking = true;
                    speechSynthesis.speak(utterance);
                } else {
                    speechQueue.push(utterance);
                    if (!isSpeaking) processSpeechQueue();
                }
            }

            function processSpeechQueue() {
                if (!isSpeaking && speechQueue.length > 0) {
                    isSpeaking = true;
                    speechSynthesis.speak(speechQueue.shift());
                }
            }

            function renderChips() {
                chipsContainer.innerHTML = '';
                chipValues.forEach(value => {
                    const chipDiv = document.createElement('div');
                    chipDiv.classList.add('chip', `chip-${value}`);
                    chipDiv.dataset.value = value;
                    chipDiv.textContent = `$${value}`;
                    chipsContainer.appendChild(chipDiv);
                });
            }

            function updateBetDisplay() {
                currentBetEl.textContent = currentBet;
                playerChipsEl.textContent = playerChips;
                dealButton.disabled = !(currentBet > 0 && !gameInProgress);
            }

            chipsContainer.addEventListener('click', function(e) {
                if (gameInProgress) return;
                const chip = e.target.closest('.chip');
                if (chip) {
                    const value = parseInt(chip.dataset.value);
                    if (playerChips >= value) {
                        currentBet += value; playerChips -= value;
                        updateBetDisplay();
                        speak(`Bet ${value}. Total bet ${currentBet}.`, false);
                    } else {
                        setGameMessage("Not enough chips!", false); speak("Not enough chips!", true);
                    }
                }
            });

            clearBetButton.addEventListener('click', function() {
                if (gameInProgress || currentBet === 0) return;
                playerChips += currentBet; const clearedAmount = currentBet; currentBet = 0;
                updateBetDisplay();
                setGameMessage("Bet cleared. Place new bet.", false);
                speak(`Bet of ${clearedAmount} cleared.`, true);
            });
            
            function createDeck() {
                deck = [];
                for (let suit of suits) for (let value of values) deck.push({ suit, value });
            }

            function shuffleDeck() {
                for (let i = deck.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [deck[i], deck[j]] = [deck[j], deck[i]];
                }
            }

            function dealCard(hand) {
                if (deck.length < 1) { createDeck(); shuffleDeck(); speak("Shuffling new deck.", true); }
                const card = deck.pop(); hand.push(card); return card;
            }

            function getCardValue(card) {
                if (!card || !card.value) return 0;
                if (['K', 'Q', 'J'].includes(card.value)) return 10;
                if (card.value === 'A') return 11;
                return parseInt(card.value);
            }

            function calculateScore(hand) {
                let score = 0, aceCount = 0;
                for (let card of hand) { score += getCardValue(card); if (card.value === 'A') aceCount++; }
                while (score > 21 && aceCount > 0) { score -= 10; aceCount--; }
                return score;
            }

            function createCardElement(card, isHidden = false) {
                const cardDiv = document.createElement('div');
                cardDiv.classList.add('card');
                if (isHidden) cardDiv.classList.add('hidden-card');
                else {
                    const suitColor = (card.suit === 'â™¥' || card.suit === 'â™¦') ? 'red' : 'black';
                    cardDiv.classList.add(suitColor);
                    cardDiv.innerHTML = `<span class="card-value-top">${card.value}</span><span class="card-suit">${card.suit}</span><span class="card-value-bottom">${card.value}</span>`;
                }
                return cardDiv;
            }

            function renderHands(revealDealerFull = false) {
                playerCardsEl.innerHTML = ''; playerHand.forEach(card => playerCardsEl.appendChild(createCardElement(card)));
                dealerCardsEl.innerHTML = '';
                if (dealerHand.length > 0) {
                    if (gameInProgress && !revealDealerFull) {
                        dealerCardsEl.appendChild(createCardElement(dealerHand[0]));
                        if (dealerHand.length > 1) dealerCardsEl.appendChild(createCardElement(dealerHiddenCard, true));
                    } else dealerHand.forEach(card => dealerCardsEl.appendChild(createCardElement(card)));
                }
                playerScoreEl.textContent = playerScore;
                dealerScoreEl.textContent = (gameInProgress && dealerHand.length > 0 && !revealDealerFull) ? getCardValue(dealerHand[0]) : dealerScore;
            }
            
            function setGameMessage(message, shouldSpeak = true) {
                gameMessageEl.textContent = message;
                if (shouldSpeak) speak(message, true); 
            }

            function setAdviceMessage(advice, strategyKey = null, shouldSpeak = true) {
                adviceMessageEl.textContent = advice;
                if (advice && shouldSpeak) {
                    let speakableAdvice = advice.split("Consider")[0].replace(/Your score: \d+\. Dealer shows: \d+\. /i, "");
                    speak(speakableAdvice, false); 
                }
                if (strategyKey && advice) {
                    explainAdviceButton.classList.remove('hidden'); explainAdviceButton.dataset.strategy = strategyKey;
                } else explainAdviceButton.classList.add('hidden');
            }

            function toggleActionButtons(canHitStand, canStartNewGame) {
                hitButton.disabled = !canHitStand; standButton.disabled = !canHitStand;
                dealButton.disabled = !canStartNewGame || currentBet === 0;
                chipsContainer.style.pointerEvents = canStartNewGame ? 'auto' : 'none';
                chipsContainer.style.opacity = canStartNewGame ? '1' : '0.6';
                clearBetButton.disabled = !canStartNewGame;
            }

            function startGame() {
                if (currentBet === 0) { setGameMessage("Please place a bet first!"); return; }
                gameInProgress = true; setAdviceMessage("", null, false);
                createDeck(); shuffleDeck(); playerHand = []; dealerHand = [];
                dealCard(playerHand); dealerHiddenCard = dealCard(dealerHand);
                dealCard(playerHand); dealCard(dealerHand);
                playerScore = calculateScore(playerHand); dealerScore = calculateScore(dealerHand);
                renderHands(); setGameMessage("Your turn!", true);
                toggleActionButtons(true, false);
                checkBlackjack(); 
                if (gameInProgress) getAndDisplayAdvice();
            }

            function revealAllCardsAndFinalScore() { renderHands(true); }

            function checkBlackjack() {
                const playerHasBj = playerScore === 21 && playerHand.length === 2;
                const dealerHasBj = dealerScore === 21 && dealerHand.length === 2;
                if (playerHasBj || dealerHasBj) {
                    revealAllCardsAndFinalScore();
                    if (playerHasBj && dealerHasBj) { setGameMessage("Push! Both Blackjack.", true); playerChips += currentBet; }
                    else if (playerHasBj) { setGameMessage("Blackjack! You win 1.5x!", true); playerChips += currentBet + Math.floor(currentBet * 1.5); }
                    else { setGameMessage("Dealer Blackjack! You lose.", true); } // Player loses bet (already deducted)
                    endHand();
                }
            }
            
            function playerHit() {
                if (!gameInProgress) return;
                dealCard(playerHand); playerScore = calculateScore(playerHand);
                speak(`You hit. Score: ${playerScore}.`, false); renderHands();
                if (playerScore > 21) { setGameMessage("Bust! You lose.", true); setAdviceMessage("", null, false); endHand(false); }
                else if (playerScore === 21) { setGameMessage("You have 21! Standing.", true); setAdviceMessage("", null, false); playerStand(); }
                else getAndDisplayAdvice();
            }

            function playerStand() {
                if (!gameInProgress) return;
                setGameMessage("You stand. Dealer's turn.", true); setAdviceMessage("", null, false);
                toggleActionButtons(false, false); dealerTurn();
            }

            async function dealerTurn() {
                revealAllCardsAndFinalScore();
                speak(`Dealer shows ${dealerHand[1].value}. Score: ${dealerScore}.`, true);
                await new Promise(resolve => setTimeout(resolve, isMuted ? 200 : 1500));

                while (dealerScore < 17 && playerScore <= 21) {
                    await new Promise(resolve => setTimeout(resolve, isMuted ? 200 : 800));
                    dealCard(dealerHand); dealerScore = calculateScore(dealerHand);
                    revealAllCardsAndFinalScore(); 
                    speak(`Dealer hits. Score: ${dealerScore}.`, true);
                    await new Promise(resolve => setTimeout(resolve, isMuted ? 200 : 1500));
                }

                if (dealerScore > 21) { setGameMessage("Dealer busts! You win!", true); playerChips += currentBet * 2; }
                else if (dealerScore > playerScore) { setGameMessage(`Dealer stands. Dealer wins.`, true); }
                else if (playerScore > dealerScore) { setGameMessage(`Dealer stands. You win!`, true); playerChips += currentBet * 2; }
                else { setGameMessage(`Dealer stands. Push!`, true); playerChips += currentBet; }
                endHand(false); 
            }
            
            function endHand(resetBetAndMessage = true) { 
                gameInProgress = false; toggleActionButtons(false, true); 
                dealerHiddenCard = null; revealAllCardsAndFinalScore(); updateBetDisplay(); 
                if (playerChips <= 0 && currentBet === 0) {
                    setGameMessage("Game Over! No more chips. Refresh.", true);
                    speak("Game Over. Out of chips.", true);
                    dealButton.disabled = true; clearBetButton.disabled = true;
                    chipsContainer.style.pointerEvents = 'none'; chipsContainer.style.opacity = '0.6';
                } else {
                    // speak("Round over. Place new bet.", false); // Can be chatty
                }
            }

            function getBasicStrategyAdvice() {
                if (playerHand.length < 2 || dealerHand.length < 1 || !gameInProgress || playerScore > 21) return { advice: "", strategyKey: null };
                const dealerUpCard = dealerHand[0];
                if (!dealerUpCard) return { advice: "", strategyKey: null };
                const dealerUpCardValue = getCardValue(dealerUpCard);
                let advice = `Your ${playerScore}, Dealer shows ${dealerUpCardValue}. `; // Shortened
                let strategyKey = "HitOrStand"; 
                if (playerScore <= 11) advice += "Hit.";
                else if (playerScore === 12) advice += (dealerUpCardValue >= 4 && dealerUpCardValue <= 6) ? "Stand." : "Hit.";
                else if (playerScore >= 13 && playerScore <= 16) advice += (dealerUpCardValue >= 2 && dealerUpCardValue <= 6) ? "Stand." : "Hit.";
                else advice += "Stand.";
                return { advice, strategyKey };
            }

            function getAndDisplayAdvice() {
                const { advice, strategyKey } = getBasicStrategyAdvice();
                setAdviceMessage(advice, strategyKey, true); 
            }

            dealButton.addEventListener('click', startGame);
            hitButton.addEventListener('click', playerHit);
            standButton.addEventListener('click', playerStand);
            
            explainAdviceButton.addEventListener('click', function() {
                if (this.dataset.strategy) fetchStrategyExplanation(this.dataset.strategy);
            });

            muteButton.addEventListener('click', () => {
                isMuted = !isMuted;
                muteButton.innerHTML = isMuted ? "<span>ðŸ”Š Unmute</span>" : "<span>ðŸ”‡ Mute Buddy</span>";
                if (isMuted && speechSynthesis.speaking) { speechSynthesis.cancel(); speechQueue = []; isSpeaking = false; }
                speak(isMuted ? "Audio muted." : "Audio enabled.", true);
            });

            async function fetchStrategyExplanation(strategyType) {
                geminiModalContent.innerHTML = '<div class="loader"></div><p class="text-center text-gray-600">Loading explanation...</p>';
                geminiModal.style.display = "block";
                speak("Fetching strategy explanation.", false);
                const apiKey = ""; // Handled by Canvas or your environment
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`; 
                let prompt = `Explain Blackjack strategy for '${strategyType === "HitOrStand" ? "Hit or Stand decisions based on player total and dealer upcard" : strategyType}' in simple terms. Use paragraphs.`;

                try {
                    const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ contents: [{ role: "user", parts: [{ text: prompt }] }] }) });
                    if (!response.ok) throw new Error(`API Error: ${response.status}`);
                    const result = await response.json();
                    if (result.candidates && result.candidates[0]?.content?.parts?.[0]?.text) {
                        let text = result.candidates[0].content.parts[0].text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\n\n/g, '</p><p>').replace(/\n/g, '<br>');
                        geminiModalContent.innerHTML = `<p>${text}</p>`; speak("Explanation loaded.", false);
                    } else { throw new Error("No content in API response."); }
                } catch (error) {
                    console.error("Gemini API Fetch Error:", error);
                    geminiModalContent.innerHTML = `<p>Error loading explanation: ${error.message}.</p>`;
                    speak("Error fetching explanation.", true);
                }
            }

            if(modalCloseButton) modalCloseButton.onclick = () => geminiModal.style.display = "none";
            window.onclick = event => { if (event.target == geminiModal) geminiModal.style.display = "none"; };

            renderChips(); updateBetDisplay(); toggleActionButtons(false, true); 
            setGameMessage("Place your bet to start!", false);
            let welcomeMsg = "Welcome! ";
            if (!speechSynthesis) { welcomeMsg += "Speech output not supported. "; muteButton.disabled = true; muteButton.innerHTML = "<span>â›” Audio N/A</span>"; }
            else { welcomeMsg += "Place bet, then Deal."; }
            speak(welcomeMsg, true);
        });
    </script>
</body>
</html>
